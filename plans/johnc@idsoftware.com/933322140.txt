Welcome to id Software's Finger Service V1.5!

Name: John Carmack
Email: johnc@idsoftware.com
Description: Programmer
Project: Quake 3 Arena
Last Updated: 07/30/1999 04:32:07 (Central Standard Time)
-------------------------------------------------------------------------------
7/30/99
-------
I apologize for not getting the Mac version released this last time.

All conspiracy theories aside, here is what actually happened:

I had my San Jose travel scheduled a while ago, and we were expecting
to have the release done before I left.  We didn't quite make it, and
nobody else at the office knew how to build the mac version after
Cash made some last minute changes.

When I got back, Graeme was taking off to move his family down here.
Graeme is in charge of building all the installs for our releases.

I considered just tossing new executables with the latest fixes
for everything, but some data has changed, and it just isn't
worth the hassle right now.

We will be making proper new releases for all architectures monday
night when he gets back.


* fixed marks fading properly in fog volumes
* show weapon in fov >90, adjusting position down as needed
* allow run/bob variables to be changed in non-cheat games
* update scoreboard info while at intermission
* fixed angles on resetplayerentities, corrects twitch on
	players as you come through a teleporter or respawn
* print "waiting to play" for tourney spectators
* fixed tied rank with 0 score and spectators
* return to roaming spectator when a followed client quits or spectates
* release windows cursor when running windowed and the console is down


7/29/99
-------
* log all client transitions, item pickups, and kills
* changed joystick axis to act just like arrow keys so they
	can be bound in the controls menu for strafing.
	Yes, this does remove slow walking from joystick movement,
	but it makes everything a lot cleaner.
* fix up PantherXL trackball support
* removed bad clear command from dedicated console clear button
* tournement queuing of spectators to enter the game
* track wins and losses as long as you stay on a tourney server
* spectators are now in fly mode instead of noclip, and use teleporters
* pass serverTime instead of msec for command timing, prevents
	timescale cheating
* track dual eventParms on player state
* draw crosshair and name in spectator mode
* fixed rcon
* r_colorMipLevels texture visualization tool
* don't allow weapon select and cycle when in follow mode
* archive cl_yawspeed and cl_pitchspeed
* don't draw place line on scoreboard when spectating
* fixed console chatting during intermission
* better recursive error handling
* fixed curve surface flags (no impact when landing on a curve bug)


7/24/99
-------

I was in San Jose for the past week.  The original idea was to go into "hermit
mode" holed up in a hotel room and get a lot of work done without any phone
calls, email, or coworkers to distract me, but I wound up with meetings
scheduled every day with various valley companies.  Next time I want to try
that, I'll pick some state like Montana... :-)

The top priority was getting the virtual machine done, but I hoped to also
get some more of the map data optimizations completed.  I definately
underestimated how big of a hole daily meetings would punch in the amount
of work I could accomplish.

On wednesday I was sweating a bit, not sure if I would have the VM
finished in time, but it all came together in the last two days.

The virtual machine interpreter is now completely functional, and cgame can
switch between being loaded as a binary .dll or an interpreted .qvm at the
change of a cvar.

The basic setup is that I have a modified version of the lcc compiler that
generates assembly files that are processed by a new tool "q3asm" into a
.qvm file that can be interpreted by q3.  You can still use normal dll's
for debugging, then release interpreted code.  You can release a binary
dll if you need some native system services (some networking stuff, for
example) or are doing very compute intensive work, but I strongly
encourage everyone to try to use the virtual machine.

The interpreted code has two prime benefits:  portability and security.

User mods done with qvms will automatically work on mac, linux, and any
other oddball ports that get released.

A qvm program cannot modify anything outside its private address space, and
the "system calls" to the game strictly limit what can be touched.  I was
scared about the binary dll's in Q2, but rationalized it to myself that people
running public servers should be aware of the dangers.  With Q3 allowing
client side programming, it just needs to be safe for everyone.

Packaging is also improved somewhat, because the virtual machine programs can
be included in pak files and are automatically handled through the search
path.
 
Unfortunately, even after doing most of the straightforward optimizations,
the interpreter is causing a 20% slowdown in timedemos right now.

I am pretty committed to running cgame interpreted, but if I don't get a
significant speedup, we may have to leave the server side game module as
a native dll.  The ui module can obviously be interpreted.

There are lots of paths I can take to get the performance up:

Write more efficient cgame code.  I will definately be looking at this.  A
lot of things that just didn't matter at all when in native code now add up
enough that they should be fixed.  I want to avoid flexibility tradeoffs if
possible.

Move more calculation from the cgame to system calls.  I have already done
this for the obvious things like memset, matrixmultiply, etc.  Any future
work will involve restructuring cgame code to focus lots of work into
simple stateless functions.  The trick is to leave all the flexibility in
the cgame while moving the work.

Implement LCC compiler optimizations.  I doubt I will pursue this, unless
there are existing optimization projects based on LCC with minimal backend
changes required.

Implement more complex interpreted instructions and peephole combine the
bytecodes into the new instructions.  I think this has some promise.

Assembly code the interpreter loop.  The compiler is generating good code,
but there is still room for gain.  I don't want to pursue this until the
high level optimizations are wrung out.

Load time compilation from bytecode to native code.  This would bloat a lot,
especially on RISC cpus.  I'm not sure that a straightforward implementation
would have significant speed benefits over an assembly interpreter loop, and
I won't have time for writing an aggressive native optimizer.

Deal with the performance cost and optimize the renderer some more to
compensate.



7/3/99
------

AMD K7 cpus are very fast.

Some timedemo numbers (a new demo, not comparable to previous scores):

Run at 640*480*16 bit color to emphasise the cpu/driver performance rather
than the hardware fill rate.

				K7-600	K7-550	PIII-500
TNT2 ultra 16 bit		73.9	68.5	53.8
Voodoo3 3000 16 bit		70.5	65.2	46.0

This is with K7 optimized drivers vs seperate PIII optimized drivers.

There is still wiggle room there in that it is possible that more effort
was expended to make the AMD drivers perform better.  That is perfectly
valid from a consumer's point of view, but muddies the technical CPU
comparison.

On identical code run on the systems, there was some more interesting data:

On my map processing tools, the K7 was faster than the PIII, but only
slightly more so than the reletive clock rate increase.  I would guess that
this is due to larger data sets that don't fit in cache as well.

On the matrox OpenGL drivers, which have not been optimized very much and
(to my knowledge) contain no PIII specific code, the K7 was a LOT faster.

The bottom line is that I feel comfortable standing behind the statement
that the K7 is faster than the PIII.  I will have to wait for some stuff
to come out of NDA to provide a more detailed technical analysis.

Architectural cleverness is all well and good, but if AMD can't keep the
clock speed up with intel, they will still fall behind.  A 700 mhz PIII
would probably find a lot of applications (especially integer apps) where
it would outperform a 600 mhz K7.


* stabilized cg_showfps
* added append support to module file opening
* automatic logging of game scores to games.log
* fixed guantlet firing action
* force a vid_restart on WM_DISPLAYCHANGE messages
* fixed sticking on stairs on very fast framerates
* fixed sticking on stair when jumping
* fixed sticking in corner while falling physics bug
* fixed slide down steep slope physics bug
* r_showimages texture use debugging tool
* cg_freezeDemo cvar
* cg_drawSnapshot cvar
* fixed warnings after demo playback
* changed "stopdemo" to "stoprecord"
* fixed phantom windows on task bar after exit
* check for unset player animation
* fixed the snap-down-look-up bug with very high sensitivities
* reduce inflicted damage by handicap
* all pmove results as events for proper demo playback

6/27/99
-------

For the past couple years when talking to chip makers about new 3D features,
3D texture maps would always come up, and I would have to mutter something
like:  "I think it is a good thing, but I can't give you a really awesome
example of using it.  3D Noise functions.  Stuff like that."

I have the awesome example now:  Lighting.

Through the entire development of Q3, I have been wanting to do dynamic
lighting of the world differently.  Many of the efficiencies gained by Q3's
new map format result in larger and larger lightmaps while it reduces polygon
count.  That meant that even small dynamic lights may force a lot of work to
generate new lighting textures.

I had been wanting to find a way to trade off additional rendering passes for
less CPU time.

This is a perfect example of me outthinking myself.

I knew it would have to be something with projecting a light spot texture
onto the world geometry, but I am keenly enough aware of the issues and
limitations in projecting a 2D texture onto 3D geometry that my mind kept
looking at worst case scenarios -- how do you project a continuous texture
onto the inside of a dome with the proper intensities, and some situations
with curves.  I thought it would require some non-trivial per triangle
analysis and operations, when I really just wanted something that could be
done on a per-vertex level.

Recently, the 3D texture insight hit me.

Create a 3D texture of, say, 32*32*32 texels and fill it with your light
attenuation function, bright point in the center, fading off to black at the
edge.  Set it to clamp mode, so any values beyond the edges stay black.  Set
up a texture coordinate generation matrix to position the light relative to
your models.  Its a simple translate and scale.  Set up lighting calculation
to only generate a value based on the relative angles, ignoring attenuation.
Use the resulting modulated texture mapping as your "lightmap" to modulate
another texture pass, or add to a previous lighting pass.

This has several important benefits:

It looks good (and identical) on both small and large polygons.  Vertex based
lighting needs an appalling amount of tessellation to avoid visibly
triangulation artifacts.  Even if you tessellate to the same sample density as
your lightmap grid (hundreds of thousands per map), vertex lighting still
looks worse, because it is a triangular instead of bilinear interpolation.

It can be done completely by upcoming lighting and texgen hardware, but is
efficient in software implementations.

It can be shadowed by either stencil volume shadows or shadow buffer tests.

Post Q3A, I plan on doing a research engine that is fully dynamically lit
and shadowed instead of using lightmaps.

Ok, but we don't have 3D textures in any hardware now, so this doesn't help
me for Q3A.

I continued thinking along complex lines, like "Any planar slice of a
spherical 3D texture will be a 2D circle, and the three triangle points
can occupy any location on their respective rings".

It still looked like a big mess.

I got tired of thinking about it, and just started coding in some
infrastructure to do extra lighting passes.  I just made a gradient circle
texture for the lighting, and generated the texture coordinates by just
translating and scaling X and Y from the world coordinates.

I got it running, grabbed a rocket launcher, and fired down a hallway.  It
looked just fine.  I was stunned.  I had been thinking about complex
ramifications of weird edge cases for the past year when all it took was a
couple hours of programming and the simplest possible approach to make it
work decent.  Sigh. :-)

The only real addition required was a fading of the light contribution with
Z distance from the surface.  The downside to this hack is that while you
get a nice ball of light moving over floors and ceilings, you only get a
wash of light on walls.  In hindsight, I can analyze this in the context of
our games and say "Almost all movement and targeting takes place in the XY
plane in a FPS, so accuracy along the Z axis is not necessary."

The somewhat more obvious change to dynamic lighting that wasn't related to
the projection issue is that I have it currently set up as a postprocess
pass, rather than an additive pass on the lightmap.  Adding to the lightmap
is more "right", but it really complicates the multitexture implementation,
and on some surfaces, the lightmap is actually done after the base texture,
so it couldn't be added to.  The end result is that brighter areas are
changed more by dlights than dark areas.  I don't feel TOO bad about that,
because its not like the dlight is much of a proper lighting simulation
even in the best case...


* fixed tourney restart
* fixed jittering on plats
* fixed ref use without a world
* new default image that lets you see mapping coordinates
* fixed reliable sequences on restarts and demos
* allow maxclients to change between levels
* randomize shell ejection start position and angles
* display attackers head after every wound
* added gamma and overbright support to mac version
* removed table from sound mixing
* remove smoke and blood puffs when you run through them
* set cheats to 1 on disconnect
* shader sort value is now floating point
* new trajectory type "TR_INTERPOLATE", skip interpoaltion
	for other types
* fixed door open timing
* fixed bug with >8 portal areas
* added area print to r_shwocluster
* removed all the partial shader match cruft, fixing a crash-on-load
* fixed bug with personal shadows not being setup properly
* nomipmap shader parm split and expanded:
	nopicmip : ignores r_picmip so image will always be high res
	nomipmap : forces a single level texture, used for console font
* shrank sound mixing buffer for better caching
* new shader option: q3map_lightsubdivide 
	larger values make q3map -light proceed faster
* new vertex array interleaving
* fixed bmodels not counting patches in bounds
* fixed patch sphere culling on rotating entities
* cg_simpleItems now draws sprite items
* fixed serverid being 0 when map is started from cmdline
* fixed UI on mode changes
* replaced 1280*960 mode with 1280*1024
* test all rotated orders for tristrips from faces
* fixed RB_SurfacePolychain to not duplicate vertexes
* changed planar face surface type from a convex polygon to a
	general collection of coplanar triangles
* change renderer to use bmodel surface list instead of tree
* changed areabits pointer to areamask array
* fixed bad loop when client reliable message overflows
* fixed swapinterval after vid_restart
* wall mark clipping moved out of cgame, extended
	for better wrapping over multiple brushes
* picmip defaults to 1 under all cases now
* automatic curve LOD grouping
* duplicated SCR_ functions into cgame
* implemented Micahel Julier's optimization work
* implimented Michael Gold's SMP patch
* new reliable command transport
* use ENTITYNUM_NONE and ENTITYNUM_WORLD constants, which
	are now in MAX_GENTITIES range for safe net transport
* wait for attack released after respawning before firing
* added a delay before moving everyone to intermission spot
* fixed bug with regibbing of gibbed body ques
* blood trails behind gibs
* changed localents over to trajectories
* removed world as entity zero, clients are now 0 to MAXCLIENTS-1
* changed game interface functions to use clientnums instead of pointers
* removed speculative usercmd_t from user packets
* new item pickup code, fixed silent item pickup
	on grazing hits, and expanded the pickup
	range by 20% without changing the physical
	bounding box
* allow a single "quick jump" without delay