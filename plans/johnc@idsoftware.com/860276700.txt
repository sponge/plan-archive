[idsoftware.com]

Login name: johnc     			In real life: John Carmack
Directory: /raid/nardo/johnc        	Shell: /bin/csh
On since Mar  6 22:22:06		1 hour 19 minutes Idle Time
   on ttyp3 from idnewt
Plan:
======================
mar 13

Here is a technical issue to be discussed:

I am strongly considering dropping qc in Quake 2 in favor of exporting most of the game logic to a seperate .dll file.  This wasn't an option when we had to support dos, but I think it is the correct choice now.

There are a lot of issues involved with this.

As everyone who has tried to do anything serious with qc knows, it has its limitations (ahem).  I could improve the language, or just adopt a real language like java, but the simplest thing to do would be just use native code.

It would definately be more efficient as a dll.  As we do more sophisticated game logic, efficiency becomes more and more important.  For simple deathmatch modifications this wouldn't be a big deal, but for full size game levels it will likely be at least a 5% to 10% overall speed improvement.

It would be non-portable.  I am dreading the reaction to this from the linux community.  Game modifications would have to be compiled seperately for each target architecture (windows, linux, irix, etc).  I do still intend to have the client be generic to all mods (but more flexible than Q1), so it is really only an issue for servers.

There are security concerns.  I suppose to a world that embraces Active-X, this isn't really an issue, but binary code patches still spook me.

You would actually need a compiler to hack quake.  For the serious people, this isn't an issue, but it would cut out a number of people that currently enjoy hacking quake.  I have a strange mixture of pride and shame when I think about the people that have actually started learning programming in my crappy little qc language.

You could debug your patch in a real debugger!  Yipee!


========================================

Mar 18

I have gotten a significant amount of response on the Quake 2 extension mechanism.  I do read everything that comes my way (I can't respond to all of it, though), and I have learned a few things from the mail.

Nothing is set in stone yet, but it is still looking like a dll is going to be the primary interface.  I have been seriously considering a java interface, but the tradeoffs (time spent implementing takes away from something else...) just don't quite add up.  Other options, like enhancing qc or using other languages like perl have very remote chances.

One of the primary reasons is that you can allways build UP -- put more functionality on top of a dll, but you can't allways build DOWN -- accessing the registry from java for instance.

For Id Software to develop a game, a dll will be most efficient.  We have more cpu power, and we can debug it more easily.  We are directing significant effort towards making Quake 2 a better GAME, as well as just a better mutliplayer virtual world.  Quake 1 was pretty messed up from a game standpoint, and we don't plan on doing that again.

What I can offer the qc hacking crowd is a public release of the qc interface and interpreter code from Quake 1 when Quake 2 is released.  The user community can then bolt things together so that there can be one publicly trusted DLL that executes an updated and modified qc language for portable, secure add ons.

I really do care about portability, but it is just one factor that needs to be balanced against all the others.  Things just aren't clear cut.

Speaking of portability, to remove the guesswork that goes on, here are my current opinions on the various platforms:

Win32
Win32 rules the world.  You are sticking your head in the sand if you think otherwise.  The upside is that windows really doesn't suck nowdays.  Win 95 / NT 4.0 are pretty decent systems for what they are targeted at.  I currently develop mostly on NT, and Quake 2 will almost certainly be delivered on win32 first.  Our games should run as well as possible in NT, we won't require any '95 only features.

Dos
We are not going to do another dos game.  No amount of flaming hate mail is going to change my mind on this (PLEASE don't!).  The advantages of good TCP/IP support, dynamic linking, powerfull virtual memory, device drivers, etc, are just too much to overcome.  Yes, all of those can be provided under dos in various ways, but it just isn't worth it.

Linux
I consider linux the second most important platform after win32 for id.  From a biz standpoint it would be ludicrous to place it even on par with mac or os/2, but for our types of games that are designed to be hacked, linux has a big plus: the highest hacker to user ratio of any os.  I don't personally develop on linux, because I do my unixy things with NEXTSTEP, but I have a lot of technical respect for it.

MacOS
From a money making standpoint, the only OS other than win32 that matters, and it doesn't matter all that much.  We have professional ports done to MacOS instead of unsupported hack ports, which is a mixed blessing.  They come out a lot later (still waiting for quake...), but are more full featured.  I have zero respect for the MacOS on a technical basis.  They just stood still and let microsoft run right over them from waaay behind.  I wouldn't develop on it.

OS/2
A native OS/2 port of any of our products is unlikely.  We just don't care enough, and we are unwilling to take time away from anything else.

SGI
I don't particularly care for IRIX as a development environment (compared to NT or NEXTSTEP), but SGI has the coolest hardware to run GL apps on.  Safe to assume future IRIX ports, but its not exactly a top priority.

AIX / OSF / HPUX / SOLARIS
I wouldn't start a port to any of these, but if a trusted party (Zoid) wanted to do them, I probably wouldn't object.

BeOS
I bought a BeBox because I am a solid believer in SMP, and I like clean, from-scratch systems.  I was left fairly non plussed by it.  Yes, it is lean and mean and does a couple things better than any other OS I have seen, but I just don't see any dramatic advantages to it over, say, NEXTSTEP.  Lion (the company doing the mac quake port) has a BeOS port of quake sort of working, and have my full support in releasing it, but it will be strictly an act of charity on their part, so don't expect too much.

Plan9
I spent a few months running Plan9.  It has an achingly elegent internal structure, but a user interface that has been asleep for the past decade.  I had an older version of quake dedicated server running on it (don't ask me for it -- I lost it somewhere) and I was writing a civilized window manager for it in my spare time, but my spare time turned out to be only a couple hours a month, and it just got prioritized out of existance.

NEXTSTEP
My faviorite environment.  NT and linux both have advantages in some areas, but if they were on equal footing I would choose NEXTSTEP hands down.  It has all the power of unix (there are lots of things I miss in NT), the best UI (IMHO, of cource), and it just makes sense on so many more levels than windows.  Yes, you can make windows do anything you want to if you have enough time to beat on it, but you can come out of it feeling like you just walked through a sewer.

In the real world, things aren't on equal footing, and I do most of my work on NT now.  I hold out hope that it may not stay that way.  If apple Does The Right Thing with rhapsody, I will be behind them as much as I can.  NEXTSTEP needs a couple things to support games properly (video mode changing and low level sound access).  If apple/next will provide them, I will personally port our current win32 products over.

If I can convince apple to do a good hardware accelerated OpenGL in rhapsody, I would be very likely to give my win NT machine the cold shoulder and do future development on rhapsody.  (I really don't need Quickdraw3D evangelists preaching to me right now, thank you)

========================================

Mar 23


Michael Abrash is working at microsoft again, due to external reasons.  This is the only time anyone has ever left id that we aren't better off without. :(

That does give me an excuse to visit seattle more often and pester the folks at microsft about various broken things...

Look for a hardcover compilation of nearly everything Michael has written later on this year.  Michael and I are probably going to add some hindsight notes to many of the articles for the new edition.

--------

N64 quake is looking really awesome.  We got DM5 (the only level small enough to fit before we take a lot of space saving measures) running perfectly in only two weeks.  It looks about like glquake with "picmip 1", and it runs 30fps.

We are going to have transparent water in all the maps, and all the lights will have full color control, so it should look great.

We don't know what maps we are going to use yet.  There will probably be a combination of modified quake, level pack, and new maps.  The biggest pain is the tiny size of the cartridge.  I am going to implement some more space efficient file formats, and all the maps are going to have the non-essentials crunched out, but we are still not going to be able to fit as many on as I would like.

--------

Work is progressing well with the new rendering architectures.  I have a test harness that can dynamically switch between using a ref_soft.dll and ref_gl.dll for rendering in the same window.  I have a lot of work to do before the entire game will run like that, and there may be some incompatabilities with normal quake, because this is aimed primarily for Quake 2.

The interface to the renderers is very cool -- it only takes a single file of code to harness and exercise all the rendering features.  If we actually release with seperate DLLs, people are going to link the refreshes into their own programs and use it as an object level rendering toolkit...  You could write a Quake-like game in visual basic.  There is a whole mess of biz type issues with that that I don't even want to think about now.

========================================

Mar 24

Someone ran into my F40 in the parking lot, then took off.  Words cannot do justice to how I feel right now.

If anyone knows a tall white male in the dallas area that now has red paint and carbon fibre on their tan pickup truck, turn the bastard in!

========================================

April 2

The second generation QuakeWorld is out and live now.  We will probably release a couple bug fix versions over the next week or so as problems are reported.

Overall, I'm pleased with the results -- I think I have delivered very solid improvements in game play.  I certainly learned a lot along the way.  If you have anything resembling a decent connection, you should be able to play a good game.  A server with a 400+ ms ping and 10% packet loss is still not going to play all that great, but you should just avoid those.

The packet size is about as small as it is going to get for the general cases.  Any more shrinkage will have to be game-specific compression, like the specialized nail update.

I can make doors and plats move smoothly, but it will take a good chunk more development.  This will probably be done for quake 2.

I have it all set up to clip movement against other players during prediction, but I probably need a day or two to finish it.  I'm not confidant that I'll get to that anytime soon, though.

I really want to get client side demo recording and more spectator mode options (see through player's eyes, chase cam, etc), but I just don't have the time right now.

The next major upgrade will be a quakeworld that can run in software and OpenGL modes.  A verite module will come later.

This combination (QW networking and switchable rendering) will be the base that we move all of our Quake 2 work over to.

========================================

April 4

Ok, the current OpenGL code no longer scales the status bar and console.  You can stop complainng now.  The next release will be the consolidated rendering code for quakeworld.  I'm not sure when I will be able to make a standalone version.

The consolidated quake will also be available on NT-alpha as well as x86.  If you have a powerstorm-T card, glquake works pretty good.  Glint and oxygen cards don't work well enough, but the normal quake software version should work fine.  We may get a little bit of asm code written for the software version.


