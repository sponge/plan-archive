Ion Storm

User Name.........joey
Full Name.........Joey Liaw
Description.......Programmer
Last NT Logon.....Tuesday, January 13, 1998 at 15:34




============ 1998-01-13

* More on DLL Security Issues, OpenQuake, et al *

Thanks for the great response from people!  Please read update Jan 12 if you
haven't already....  in any case I am a bit more pessimistic about ever finding
a solution to the DLL problem.

Remember that everything in this plan file does not necessarily reflect the
opinions of Ion Storm, they reflect my personal opinion and preliminary
thoughts on things that may happen in the future.

(1) Feasability

    After reading the many suggestions from different people, the method I 
    proposed yesterday seems much less feasable.  I argued that perhaps we
    could filter DLL's making direct Windows calls, but there are too many
    easy ways to work around such a measure, and it would be a hassle in
    general to rewrite a layer over a lot of system library code.

    The fundamental problem is that under Windows 95 there is no security
    whatsoever.  Under NT, we could conceivably load the DLL's through
    a separate process with its own security descriptor that prevents it
    from reading/writing subdirectories above the dll's directory or on a
    network drive.  Such a solution is far from elegant as well.

    Right now, third-party verification methods look to be the best solution,
    which brings me to ---

(2) OpenQuake (visit their sit)

    These people propose to verify source code and publish checksums for
    verified DLL's.  They also have a nice discussion on the dangers of DLL's
    as well.  These people have started a very good thing, and there are some 
    things I would like to point out:

    CON: Nothing is to stop somebody from releasing a malicious DLL and
         sending harmless-looking code to OpenQuake (with all the damaging 
         code removed).  Nobody has the time to get every DLL compiler and 
         compile every DLL out there, and people can even use custom
         static libraries available on the net they did not write 
         themselves (in which case the OpenQuake people cannot compile 
         it unless they have all the libraries as well).  Sometimes these
         libraries may have their own NDA, and so cannot be released to
         OpenQuake, etc.  Also some people have things against releasing 
         source code, NDA or not.  Therefore I think it should be
         unnecessary to release source code to OpenQuake since it is not an
         effective deterrent and may be troublesome for some DLL authors.

    PRO: Individual accountability -- each person who releases DLL's to
         OpenQuake has an individual identity.  If their DLL does something
         very, very bad, the author can be held responsible.

    The problem is that even if an individual can be held accountable, once
    major damage is done it is too late (like releasing Anachronox source
    code to USENET).  However, this is nearly a moot point to debate since
    we are unlikely to ever get 100% security in any case.

    PRO: Tamper-checking -- in a method similar to CDDB, Anox/Katana can
         check databases on the internet and match known dll's with their MD5
         checksums, or some other security footprint.  OpenQuake proposes
         to do this in a separate application, and if we decide to go the
         third-party route, we would build this directly into Anachronox
         or Daikatana.

    Anyways as of today the OpenQuake third-party solution seems to be the
    most reasonable approximation to something secure.  Comments are always
    welcome, I would appreciate any feedback.

 Click here to mail.

============ 1998-01-12

Man, I almost put 1997 instead of 1998 AGAIN.

* DLL Security Issues *

There has been an ongoing debate in the office about DLL security.  Since a DLL
is the same as any other Windows executable, when you download a gamex86.dll 
q2 patch, you could be downloading potentially malicious software.

I believe that id's unofficial stance on this is (please correct me if I am 
mistaken) that if one is going to take the risk of downloading shareware 
software from the internet, then they can deal with the risk of downloading 
game patches as well.

Unfortunately, I must disagree with this outlook.  I am not so concerned about
viruses in DLL's as I am what DLL's can do to your computer in ways that no
virus scanner can prevent, things are extremely easy to program.

    - Read, write, change any file on your computer and any file on your
      network to which you have permissions.

    - For example, some person could write a DLL that searches your network
      for source code and mails it to an untraceable throwaway AOL account.

    - Delete files on your computer or network, setting your project back
      weeks.

    When you download shareware from the internet, it is usually copyrighted 
    material by an individual or corporation.  There is very little chance
    that when you download shareware from Stroud's or Windows95.com that 
    it will contain malicious code.  There are companies and individuals that
    can be sued.  It is very hard to track down DLL's written by private
    individuals and released anonymously onto the net.

Some people may argue the following:

(1) Nobody has so much free time or so much repressed anger that they would
    feel the need to write bad DLL's.

    The computer gaming user base has many such people.  When I was at DWANGO,
    a large portion of code was devoted entirely to anti-cheating and anti-
    hacking and anti-frauding.  I'm not saying anything bad about the computer 
    gamers, I'm saying that there are computer gamers active in the Quake 
    community who have malicious intent, and think it is fun and cool to do 
    wrongful things because few other people can do them.

(2) There will be many people testing the DLL's so malicious ones will be
    quickly weeded out.

    Unfortunately this is an idealistic sort of view.  Common shareware/
    frreeware applications have a much larger user base than Quake DLL's.

(3) We can implement a verification system where a certain website
    won't put up any DLL's for download unless it has
    been thoroughly tested, and issue warnings for evil DLL's.

    This sort of system may stop the initial wave of malicious DLL's, but then
    hackers will get smarter, putting time-dependent dormant code into a DLL
    or making DLL's that target only specific domains, like idsoftware.com or
    ionstorm.com.

Now before you think I am all paranoid, there is a solution we are working on
for all Anachronox (and probably Daikatan) DLL's.  Basically it involves having
Quake provide DLL's with file, network, and graphics services, and rejecting
DLL's that make these calls directly to Windows.  More on this when we finish
it, it's mid-progress right now and my design may change unpredictably.  Also
for Anox and Katana you never replace gamex86.dll, you download plug-in DLL's,
and you can have as many as you want running at the same time.

These are just a few of my ideas and concerns.  Email me what you think.
Click to email.

============ 1998-01-05

Happy new year to the gaming community!  Hopefully at this time next year you
will all be playing Anachronox :-)  Not much new on the anox coding front, 
except that one thing we will really be concentrating on is simplifying 
third-party expandability for anox....

============ last year's plan files went bye-bye
(File last updated on Tue 13 Jan 1998 at 16:25)